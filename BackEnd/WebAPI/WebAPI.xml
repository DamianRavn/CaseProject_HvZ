<?xml version="1.0"?>
<doc>
    <assembly>
        <name>WebAPI</name>
    </assembly>
    <members>
        <member name="T:WebAPI.Controllers.AdminsController">
            <summary>
            API endpoints for Admin table
            </summary>
        </member>
        <member name="M:WebAPI.Controllers.AdminsController.#ctor(WebAPI.Models.HumanVZombiesDbContext,AutoMapper.IMapper)">
            <summary>
            Adding context and mapper with dependency injection.
            </summary>
            <param name="context">The proper context.</param>
            <param name="mapper">The automapper.</param>
        </member>
        <member name="M:WebAPI.Controllers.AdminsController.GetAdmin">
            <summary>
            Fetches all admins in the database.
            </summary>
            <returns>A list of admins.</returns>
        </member>
        <member name="M:WebAPI.Controllers.AdminsController.GetAdmin(System.Int32)">
            <summary>
            Fetches a specific admin.
            </summary>
            <param name="id">Id of the admin to fetch.</param>
            <returns>A single admin.</returns>
        </member>
        <member name="M:WebAPI.Controllers.AdminsController.PostAdmin(WebAPI.Models.DTO.Admin.AdminCreateDTO)">
            <summary>
            Creates a new admin in the database.
            </summary>
            <param name="dtoAdmin">An object contining data for the new admin.</param>
            <returns>The newly created admin.</returns>
        </member>
        <member name="M:WebAPI.Controllers.AdminsController.AdminExists(System.Int32)">
            <summary>
            Helper function to test if a user exists in the database or not.
            </summary>
            <param name="id">Id of the user to check.</param>
            <returns>True if the user exists; false otherwise.</returns>
        </member>
        <member name="T:WebAPI.Controllers.GamesController">
            <summary>
            The controller holds all the API endpoints for the Games table.
            </summary>
        </member>
        <member name="M:WebAPI.Controllers.GamesController.#ctor(WebAPI.Models.HumanVZombiesDbContext,AutoMapper.IMapper)">
            <summary>
            Adding context and mapper with dependency injection.
            </summary>
            <param name="context">The proper context</param>
            <param name="mapper">The automapper</param>
        </member>
        <member name="M:WebAPI.Controllers.GamesController.GetGames">
            <summary>
            Fetches all games from the database.
            </summary>
            <returns>A collection of games.</returns>
        </member>
        <member name="M:WebAPI.Controllers.GamesController.GetGame(System.Int32)">
            <summary>
            Fetches a specific game in the database.
            </summary>
            <param name="id">The id of the game to fetch.</param>
            <returns>The game, if it exists. Otherwise, the NotFound response.</returns>
        </member>
        <member name="M:WebAPI.Controllers.GamesController.PostGame(WebAPI.Models.DTO.Game.GameCreateDTO)">
            <summary>
            Creates a new game based on the given game object.
            </summary>
            <param name="dtoGame">The game object.</param>
            <returns>The newly created game.</returns>
        </member>
        <member name="M:WebAPI.Controllers.GamesController.PutGame(System.Int32,WebAPI.Models.DTO.Game.GameUpdateDTO)">
            <summary>
            Updates a specific game with the values of the given game object.
            </summary>
            <param name="id">The id of the game to update.</param>
            <param name="dtoGame">A game object containing the updated values.</param>
            <returns>Nothing if the update succeeds. BadRequest if the given id doesn't match the id of a game. NotFound if the game doesn't exist.</returns>
        </member>
        <member name="M:WebAPI.Controllers.GamesController.GameExists(System.Int32)">
            <summary>
            Helper function, which checks if a game with the given id exists.
            </summary>
            <param name="id">The id to check for.</param>
            <returns>True if a game with that id exists. False otherwise.</returns>
        </member>
        <member name="T:WebAPI.Controllers.PlayersController">
            <summary>
            The controller holds all the API endpoints for the Players table
            </summary>
        </member>
        <member name="M:WebAPI.Controllers.PlayersController.#ctor(WebAPI.Models.HumanVZombiesDbContext,AutoMapper.IMapper)">
            <summary>
            Adding context and mapper with dependency injection.
            </summary>
            <param name="context">The proper context</param>
            <param name="mapper">The automapper</param>
        </member>
        <member name="M:WebAPI.Controllers.PlayersController.GetPlayers">
            <summary>
            Fetches all players in the database.
            </summary>
            <returns>A collection of players.</returns>
        </member>
        <member name="M:WebAPI.Controllers.PlayersController.GetPlayer(System.Int32)">
            <summary>
            Fetches a specific player in the database.
            </summary>
            <param name="id">The id of the player to fetch.</param>
            <returns>The player, if it exists. Otherwise, the NotFound response.</returns>
        </member>
        <member name="M:WebAPI.Controllers.PlayersController.PutPlayer(System.Int32,WebAPI.Models.DTO.Player.PlayerUpdateDTO)">
            <summary>
            Updates a specific player with the values of the given player object.
            </summary>
            <param name="id">The id of the player to update.</param>
            <param name="dtoPlayer">A player object containing the updated values.</param>
            <returns>Nothing if the update succeeds. BadRequest if the given id doesn't match the id of the player. NotFound if the player doesn't exist.</returns>
        </member>
        <member name="M:WebAPI.Controllers.PlayersController.PostPlayer(WebAPI.Models.DTO.Player.PlayerCreateDTO)">
            <summary>
            Creates a new player based on the given player object.
            </summary>
            <param name="dtoPlayer">The player object.</param>
            <returns>The newly created player.</returns>
        </member>
        <member name="M:WebAPI.Controllers.PlayersController.DeletePlayer(System.Int32)">
            <summary>
            Deletes the player with the given id.
            </summary>
            <param name="id">The id of the player to delete.</param>
            <returns>Nothing if the deletion succeeds. NotFound if no player with the given id exist.</returns>
        </member>
        <member name="M:WebAPI.Controllers.PlayersController.GetPlayersNonAdmin">
            <summary>
            Fetches all players in the database by a non-admin user. Doesn't display BiteCode and IsPatientZero attributes.
            </summary>
            <returns>A collection of players.</returns>
        </member>
        <member name="M:WebAPI.Controllers.PlayersController.GetPlayerNonAdmin(System.Int32)">
            <summary>
            Fetches a specific player in the database by a non-admin user. Doesn't display BiteCode and IsPatientZero attributes.
            </summary>
            <param name="id">The id of the player to fetch.</param>
            <returns>The player, if it exists. Otherwise, the NotFound response.</returns>
        </member>
        <member name="M:WebAPI.Controllers.PlayersController.PlayerExists(System.Int32)">
            <summary>
            Helper function, which checks if a player with the given id exists.
            </summary>
            <param name="id">The id to check for.</param>
            <returns>True if a player with that id exists. False otherwise.</returns>
        </member>
        <member name="T:WebAPI.Controllers.UsersController">
            <summary>
            API endpoints for User table. Requires authorization
            </summary>
        </member>
        <member name="M:WebAPI.Controllers.UsersController.#ctor(WebAPI.Models.HumanVZombiesDbContext,AutoMapper.IMapper)">
            <summary>
            Adding context and mapper with dependency injection.
            </summary>
            <param name="context">The proper context.</param>
            <param name="mapper">The automapper.</param>
        </member>
        <member name="M:WebAPI.Controllers.UsersController.GetUsers">
            <summary>
            Fetches all users in the database.
            </summary>
            <returns>A list of users.</returns>
        </member>
        <member name="M:WebAPI.Controllers.UsersController.GetUser(System.Int32)">
            <summary>
            Fetches a specific user.
            </summary>
            <param name="id">Id of the user to fetch.</param>
            <returns>A single user.</returns>
        </member>
        <member name="M:WebAPI.Controllers.UsersController.PostUser(WebAPI.Models.DTO.User.UserCreateDTO)">
            <summary>
            Creates a new user in the database.
            </summary>
            <param name="dtoUser">An object contining data for the new user.</param>
            <returns>The newly created user.</returns>
        </member>
        <member name="M:WebAPI.Controllers.UsersController.UserExists(System.Int32)">
            <summary>
            Helper function to test if a user exists in the database or not.
            </summary>
            <param name="id">Id of the user to check.</param>
            <returns>True if the user exists; false otherwise.</returns>
        </member>
        <member name="T:WebAPI.Profiles.GameProfile">
            <summary>
            Defines the maps between Game and its DTOs.
            </summary>
        </member>
    </members>
</doc>
